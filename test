#!/usr/bin/env node

/**
 * Clear Labs  - WPEngine SFTP deployment script
 *
 * This script is designed to be auto-deployed during push.
 * This script does not check for errors when creating new directories,
 * thus new files within new directories will throw errors, not affecting other transfers.
 *
 * Please upate the codes to account for directory checking once required in the deployment process.
 */


require('colors');
const fs = require('fs');
const cp = require('child_process');
const args = require('minimist')(process.argv.slice(2));
const SFTPClient = require('ssh2-sftp-client');


const SFTP_CREDENTIALS = {
  dev: {
    host: 'clearlabsdev.sftp.wpengine.com',
    port: '2222',
    username: 'clearlabsdev-codeship-dev',
    password: '(0D3sh1pd3V'
  },
  staging: {
    host: 'clearstaging.sftp.wpengine.com',
    port: '2222',
    username: 'clearstaging-codeship-staging',
    password: '(0D3sh1p8Ta9E'
  },
  prod: {
    host: 'clearlabs.sftp.wpengine.com',
    port: '2222',
    username: 'clearlabs-codeship-prod',
    password: '(0D3sh1pP12oD'
  }
};
const FTP_IGNORE = [
  // Array of RegExp patterns
];
const env = args.env;
const SFTP_SETTINGS = SFTP_CREDENTIALS[env];
const sftp = new SFTPClient();


// Check for credentials
if ( !(env in SFTP_CREDENTIALS ) ) throw new Error('Credentials for requested env not supplied.');


// Globals
let processedFiles = 0;
let filesDeleted = 0;
let filesAddedOfModified = 0;
let errorFiles = 0;


// Get files list from git logs
let hash = cp.execSync(`git log --pretty="%p" -1`).toString().split('\n')[0];
// Ensure to get the parent commit
hash = hash.split(' ')[0];
let diffTree = cp.execSync(`git diff-tree --name-status --no-commit-id -r ${hash} HEAD`).toString('utf-8');
console.clear();
console.log('Processing commit: ', hash);


// Construct an array of files with method (added, modified, deleted)
diffTree = diffTree.split('\n').slice(0,-1)
  // Build file info object
  .map( item => {
    item = item.replace('\t', ':::').split(':::');
    return { method: item[0], path: item[1].trim() };
  })
  // Remove ftp-ignored files
  .filter( item => {
    let willIgnoreFile = FTP_IGNORE.some( _pattern => {
      let willIgnore = _pattern.test(item.path);
      if ( willIgnore ) {
        console.log(`Ignoring file: ${item.path}`);
      }
      return willIgnore;
    });
    return !willIgnoreFile;
  })
  // Parse directories to ensure on remote
  .map( item => {
    let dir = item.path.match( /(.+)\/.+$/i );
    // if ( dir && !ensureDirs.includes(dir[1]) && item.method !== 'D' ) {
    //   ensureDirs.push(dir[1]);
    // }
    return item;
  });


// Exit if no files to process
let filesLength = diffTree.length;
if ( !filesLength ) {
  console.log(`\nNo files needed to be transfered.\n`);
  process.exit();
};


// Start remote processing
console.log('Connecting to remote...');

sftp.connect(SFTP_SETTINGS)
.then(() => {
  console.log('Connected!'.green);

  sftp.list('.')
  .then(data => console.log('list', data))
  .then(() => process.exit())
  .catch(err => console.log('list error ', err));

  console.log('sftp.shell',sftp.shell);

  return;

  console.log(`\nProcessing ${filesLength} file(s):\n`);
  console.log(diffTree.map( item => `${item.method} ${item.path}` ).join('\n'));
  console.log('\n\n')

  diffTree.forEach(function ( _file ) {

    _file.path = `${_file.path}`;

    switch ( _file.method ) {
      case 'D':
        sftp.delete(_file.path)
        .then(function () {
          filesDeleted++;
          onFileProcessed();
        })
        .catch(onFileError);
        break;
      default:
        sftp.fastPut(_file.path, _file.path, [])
        .then(function () {
          filesAddedOfModified++;
          onFileProcessed();
        })
        .catch(onFileError);
    }

  });
})
.catch((err) => {
    console.log(err, 'catch error');
    process.exit();
});


function onFileProcessed() {
  if ( ++processedFiles >= filesLength ) {
    sftp.end();
    outputLog();
  }
}
function onFileError(err) {
  console.error(err);

  errorFiles++;
  if ( ++processedFiles >= filesLength ) {
    sftp.end();
    outputLog();
  }
}

function outputLog() {
  console.log('Finished!'.green);
  console.log('============================'.gray);
  console.log(`Files added/modified: ${filesAddedOfModified}`.yellow);
  console.log(`Files deleted       : ${filesDeleted}`.yellow);
  console.log(`Files error         : ${errorFiles}`.red);
}
